generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  firstName          String
  lastName           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isAdmin            Boolean              @default(false)
  Business           Business[]
  PasswordResetToken PasswordResetToken[]
  Request            Request[]
  UserSession        UserSession[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "PasswordResetToken_userId_fkey")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserSession_userId_fkey")
}

model Business {
  id              Int       @id @default(autoincrement())
  name            String
  adminId         Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  city            String
  companyName     String
  county          String
  isSkyddatBoende Boolean   @default(false)
  koncern         String?
  municipality    String
  orgNumber       String
  phone           String
  postalCode      String
  streetAddress   String
  type            String
  website         String
  admin           User      @relation(fields: [adminId], references: [id])
  Request         Request[]

  @@index([adminId], map: "Business_adminId_fkey")
}

model Request {
  id                  Int       @id @default(autoincrement())
  status              String    @default("PENDING")
  businessId          Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userId              Int?
  clientAge           Int
  clientGender        String
  clientNeeds         String    @db.Text
  description         String    @db.Text
  desiredLocation     String
  desiredResponseDate DateTime
  desiredStartDate    DateTime
  email               String
  interventionType    String
  isAnonymous         Boolean   @default(false)
  kommun              String
  lan                 String
  mobile              String
  name                String
  phone               String
  sentToOthers        Boolean
  business            Business? @relation(fields: [businessId], references: [id])
  user                User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Request_userId_fkey")
  @@index([businessId], map: "Request_businessId_fkey")
}

model Company {
  id           Int                    @id @default(autoincrement())
  name         String
  description  String?
  ageRangeMin  Int
  ageRangeMax  Int
  logo         String?
  email        String?
  locations    CompanyToLocation[]
  services     CompanyToService[]
  targetGroups CompanyToTargetGroup[]
  contacts     Contact[]
}

model Contact {
  id        Int     @id @default(autoincrement())
  name      String
  phone     String
  email     String
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  @@index([companyId], map: "Contact_companyId_fkey")
}

model Location {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  companies CompanyToLocation[]
}

model Service {
  id        Int                @id @default(autoincrement())
  name      String
  companies CompanyToService[]
}

model TargetGroup {
  id        Int                    @id @default(autoincrement())
  name      String
  companies CompanyToTargetGroup[]
}

model CompanyToLocation {
  companyId  Int
  locationId Int
  company    Company  @relation(fields: [companyId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])

  @@id([companyId, locationId])
  @@index([locationId], map: "CompanyToLocation_locationId_fkey")
}

model CompanyToService {
  companyId Int
  serviceId Int
  company   Company @relation(fields: [companyId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([companyId, serviceId])
  @@index([serviceId], map: "CompanyToService_serviceId_fkey")
}

model CompanyToTargetGroup {
  companyId     Int
  targetGroupId Int
  company       Company     @relation(fields: [companyId], references: [id])
  targetGroup   TargetGroup @relation(fields: [targetGroupId], references: [id])

  @@id([companyId, targetGroupId])
  @@index([targetGroupId], map: "CompanyToTargetGroup_targetGroupId_fkey")
}
