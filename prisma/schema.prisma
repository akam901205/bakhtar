generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  email              String               @unique
  password           String
  firstName          String
  lastName           String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isAdmin            Boolean              @default(false)
  Business           Business[]
  PasswordResetToken PasswordResetToken[]
  Request            Request[]
  UserSession        UserSession[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "PasswordResetToken_userId_fkey")
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserSession_userId_fkey")
}

model Business {
  id        Int       @id @default(autoincrement())
  name      String
  adminId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  admin     User      @relation(fields: [adminId], references: [id])
  Request   Request[]

  @@index([adminId], map: "Business_adminId_fkey")
}

model Request {
  id         Int      @id @default(autoincrement())
  status     String
  businessId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     Int
  business   Business @relation(fields: [businessId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([businessId], map: "Request_businessId_fkey")
  @@index([userId], map: "Request_userId_fkey")
}
